- name: deploy application via ArgoCD
  hosts: master
  become: true
  tasks:

    - name: Créer le namespace ArgoCD
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: argocd
        state: present
        kubeconfig: /etc/kubernetes/admin.conf

    - name: Ajouter le dépôt Helm Argo
      community.kubernetes.helm_repository:
        name: argo
        repo_url: https://argoproj.github.io/argo-helm

    - name: Déployer ArgoCD via Helm
      community.kubernetes.helm:
        name: argocd
        chart_ref: argo/argo-cd
        release_namespace: argocd
        create_namespace: false
        kubeconfig: /etc/kubernetes/admin.conf
        values:
          server:
            service:
              type: NodePort
            extraArgs:
              - --insecure
          configs:
            params:
              server.insecure: true

    - name: Appliquer le manifest ArgoCD kubequest deployment
      become: true
      become_user: root
      command: kubectl apply -f /home/adminuser/argocd/argocd_deploy/argocd_kubequest_deploy.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: Récupérer le mot de passe admin initial d'ArgoCD
      shell: "kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d"
      register: argocd_password

    - name: Afficher le port NodePort de ArgoCD
      shell: "kubectl get svc argocd-server -n argocd -o jsonpath='{.spec.ports[?(@.port==443)].nodePort}'"
      register: nodeport_output
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - debug:
        msg: >-
          Mot de passe admin ArgoCD : {{ argocd_password.stdout }}
          Interface accessible via : https://{{ hostvars[inventory_hostname]['ansible_host'] }}:{{ nodeport_output.stdout }}

    - name: Télécharger la CLI ArgoCD (Linux AMD64)
      get_url:
        url: https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        dest: /usr/local/bin/argocd
        mode: '0755'

    - name: Attendre qu'ArgoCD soit prêt avant de se connecter
      pause:
        seconds: 15

    - name: Connexion CLI ArgoCD
      become: false
      environment:
        ARGOCD_OPTS: "--grpc-web"
      shell: |
        y | argocd login {{ hostvars[inventory_hostname]['ansible_host'] }}:{{ nodeport_output.stdout }} \
          --username admin \
          --password '{{ argocd_password.stdout }}' \
          --insecure

